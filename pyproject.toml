[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "unified-network-platform"
version = "2.0.0"
description = "Voice-Enabled AI-Powered Restaurant Network Management Platform"
readme = "README.md"
license = {text = "ISC"}
authors = [
    {name = "Network Operations Team", email = "network-team@company.com"}
]
maintainers = [
    {name = "Network Operations Team", email = "network-team@company.com"}
]
keywords = [
    "network-management",
    "voice-control", 
    "ai-powered",
    "restaurant-chains",
    "fortigate",
    "fortimanager",
    "meraki",
    "noc-platform",
    "network-utilities",
    "claude-code"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: ISC License (ISCL)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: JavaScript",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: System :: Networking :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed"
]
requires-python = ">=3.11"
dependencies = [
    # Core FastAPI Dependencies
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "python-multipart>=0.0.12",
    
    # Data Models and Validation
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "email-validator>=2.2.0",
    
    # Database Support
    "sqlalchemy>=2.0.36",
    "aiosqlite>=0.20.0",
    
    # Authentication and Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.1",
    
    # HTTP Client for API Integrations
    "httpx>=0.28.0",
    
    # Web Framework Support
    "flask>=3.0.0",
    "flask-cors>=4.0.0",
    
    # Logging and Monitoring
    "loguru>=0.7.2",
    
    # Network Utilities
    "requests>=2.31.0",
    "urllib3>=2.0.0",
    
    # Data Processing
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    
    # Configuration Management
    "pyyaml>=6.0",
    "toml>=0.10.2",
    
    # Async Support
    "asyncio-mqtt>=0.15.0",
    "aiofiles>=23.0.0",
    
    # CLI Support
    "click>=8.1.0",
    "rich>=13.0.0",
    
    # Date/Time Handling
    "python-dateutil>=2.8.0",
    
    # Utilities and Helpers
    "validators>=0.22.0",
    "pathlib2>=2.3.0;python_version<'3.4'"
]

[project.optional-dependencies]
# Development Dependencies
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0"
]

# Production Dependencies
prod = [
    "gunicorn>=21.2.0",
    "psycopg2-binary>=2.9.9",  # PostgreSQL support
    "redis>=5.0.0"  # Redis caching
]

# Monitoring and Observability
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0"
]

# Cloud Deployment
cloud = [
    "boto3>=1.34.0",  # AWS
    "azure-identity>=1.15.0",  # Azure
    "google-cloud-core>=2.4.0"  # Google Cloud
]

# Extended Network Tools
network = [
    "netmiko>=4.3.0",  # Network device automation
    "paramiko>=3.4.0",  # SSH connectivity
    "scapy>=2.5.0",  # Network packet manipulation
    "python-nmap>=0.7.1"  # Network discovery
]

# All optional dependencies
all = [
    "unified-network-platform[dev,prod,monitoring,cloud,network]"
]

[project.urls]
"Homepage" = "https://github.com/your-org/unified-network-platform"
"Repository" = "https://github.com/your-org/unified-network-platform.git"
"Documentation" = "https://docs.unified-network-platform.com"
"Bug Tracker" = "https://github.com/your-org/unified-network-platform/issues"
"Changelog" = "https://github.com/your-org/unified-network-platform/blob/main/CHANGELOG.md"

[project.scripts]
unified-platform = "src.main:main"
platform-cli = "src.cli:main"

[project.gui-scripts]
platform-gui = "src.gui:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yaml", "*.yml", "*.json", "*.html", "*.css", "*.js", "*.png", "*.jpg", "*.ico"]

# Black Code Formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
  | web/static
)/
'''

# isort Import Sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src", "tests"]
skip_glob = ["*/migrations/*", "*/venv/*", "*/.venv/*", "*/node_modules/*"]

# MyPy Type Checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "paramiko.*",
    "netmiko.*",
    "scapy.*",
    "nmap.*"
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=85"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "api: API tests",
    "voice: Voice command tests",
    "utilities: Network utilities tests",
    "slow: Slow running tests",
    "network: Tests requiring network access"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/node_modules/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

# Ruff Linting (Alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# Bandit Security Linting
[tool.bandit]
exclude_dirs = ["tests", "migrations", "node_modules"]
skips = ["B101", "B601"]